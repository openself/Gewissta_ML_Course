install.packages("stringr")
data <- read.csv2("Response.csv", sep=";")
head(data, 10)
sum(is.na(data))
data[!complete.cases(data),]
str(data)
data$response <- as.factor(data$response)
data$cus_leng <- ordered(data$cus_leng,
levels = c("1", "2", "3"))
data$age <- as.numeric(data$age)
data[] <- lapply(data, function(x) if(is.integer(x)) as.factor(x) else x)
library(dplyr)
data$response <- recode(data$response, "0"="Нет", "1"="Да")
str(data)
data[duplicated(data),]
data <- unique(data)
# смотрим, сколько наблюдений мы теперь будем использовать
nrow(data)
summary(data$cus_leng)
set.seed(42)
data$random_number <- runif(nrow(data),0,1)
development <- data[ which(data$random_number > 0.3), ]
holdout <- data[ which(data$random_number <= 0.3), ]
data$random_number <- NULL
development$random_number <- NULL
holdout$random_number <- NULL
str(development)
str(holdout)
summary(development$response)
summary(holdout$response)
range(development$age)
development$binned <-cut(x=development$age, breaks=seq(18, 63, by=5),
include.lowest=TRUE, right=TRUE,
ordered_result=TRUE, dig.lab = 0)
summary(development$binned)
library(lsr)
development$binned2 <- quantileCut(x=development$age, n=10,
include.lowest=TRUE, right=TRUE,
ordered_result=TRUE, dig.lab=0)
detach("package:lsr", unload=TRUE)
summary(development$binned2)
str(development)
development$binned <- NULL
development$binned2 <- NULL
development$age <-cut(x=development$age,
breaks=c(18,28,31,34,
37,41,44,47,
51,55,63,+Inf),
include.lowest=TRUE,
ordered_result=TRUE)
holdout$age <-cut(x=holdout$age,
breaks=c(18,28,31,34,
37,41,44,47,
51,55,63,+Inf),
include.lowest=TRUE,
ordered_result=TRUE)
library(CHAID)
# задаем набор условий для построения дерева CHAID
params <- chaid_control(minprob = 0.01, minsplit = 1000, minbucket = 500)
# строим модель дерева CHAID
chd  <- chaid(response ~ ., control = params, development)
# выводим диаграмму дерева
plot(chd)
# выводим диаграмму дерева
# в схематичном виде
print(chd)
prob_hold <- predict(chd, holdout, type="prob")
prob_hold[1:10]
round(prob_hold[1:10], 2)
library(partykit)
treetable <- function(party_tree) {
df_list <- list()
var_names <-  attr(party_tree$terms, "term.labels")
var_levels <- lapply(party_tree$data, levels)
walk_the_tree <- function(node, rule_branch = NULL) {
# проходим структуру разбиений дерева (рекурсивная функция)
# извлекаем правила для каждой ветви
if(missing(rule_branch)) {
rule_branch <- setNames(data.frame(t(replicate(length(var_names), NA))), var_names)
rule_branch <- cbind(rule_branch, nodeId = NA)
rule_branch <- cbind(rule_branch, predict = NA)
}
if(is.terminal(node)) {
rule_branch[["nodeId"]] <- node$id
rule_branch[["predict"]] <- predict_party(party_tree, node$id, type="prob")
df_list[[as.character(node$id)]] <<- rule_branch
} else {
for(i in 1:length(node)) {
rule_branch1 <- rule_branch
val1 <- decision_rule(node,i)
rule_branch1[[names(val1)[1]]] <- val1
walk_the_tree(node[i], rule_branch1)
}
}
}
decision_rule <- function(node, i) {
# возвращаем правила разбиения в датафрейм вместе с названиями переменных и значениями
var_name <- var_names[node$split$varid[[1]]]
values_vec <- var_levels[[var_name]][ node$split$index == i]
values_txt <- paste(values_vec, collapse = ", ")
return( setNames(values_txt, var_name))
}
walk_the_tree(party_tree$node)
res_table <- Reduce(rbind, df_list)
return(res_table)
}
table <- treetable(chd)
table[1:14]
table$predict
set.seed(42)
predvalue_hold <- predict(chd, holdout, type="response")
predvalue_hold[1:10]
# строим таблицу классификации
table(holdout$response, predvalue_hold)
table(holdout$response == "Да", predict(chd,
holdout, type="prob")[,"Да"] >= 0.30)
table(holdout$response == "Да", predict(chd,
holdout, type="prob")[,"Да"] >= 0.70)
library(pROC)
# выводим AUC нашей модели дерева для контрольной выборки
roc_hold <- roc(holdout$response, prob_hold[,2])
roc_hold
# строим ROC-кривую нашей модели дерева для контрольной выборки
roc_hold <- roc(holdout$response, prob_hold[,2])
roc_hold
plot.roc(roc_hold)
# вычисляем вероятности классов для обучающей
# выборки и записываем в объект prob_dev
prob_dev <- predict(chd, development, type="prob")
# строим график ROC-кривой для обучающей выборки
roc_dev <-plot.roc(development$response, prob_dev[,2],
main="График ROC-кривой для модели CHAID",
ci=TRUE, percent=TRUE,
print.auc=TRUE, col="red")
# добавляем в уже существующий график ROC-кривую
# для контрольной выборки
roc_hold <-plot.roc(holdout$response, prob_hold[,2],
ci=TRUE, percent=TRUE,
print.auc=TRUE, print.auc.x=50, print.auc.y=45,
col="purple", add=TRUE)
# добавляем легенды
legend("bottomright", legend=c("Обучающая выборка", "Контрольная выборка"),
col=c("red", "purple"), lwd=2)
library(dplyr)
library(dplyr)
data$response <- recode(data$response, "0"="Нет", "1"="Да")
library(partykit)
treetable <- function(party_tree) {
df_list <- list()
var_names <-  attr(party_tree$terms, "term.labels")
var_levels <- lapply(party_tree$data, levels)
walk_the_tree <- function(node, rule_branch = NULL) {
# проходим структуру разбиений дерева (рекурсивная функция)
# извлекаем правила для каждой ветви
if(missing(rule_branch)) {
rule_branch <- setNames(data.frame(t(replicate(length(var_names), NA))), var_names)
rule_branch <- cbind(rule_branch, nodeId = NA)
rule_branch <- cbind(rule_branch, predict = NA)
}
if(is.terminal(node)) {
rule_branch[["nodeId"]] <- node$id
rule_branch[["predict"]] <- predict_party(party_tree, node$id, type="prob")
df_list[[as.character(node$id)]] <<- rule_branch
} else {
for(i in 1:length(node)) {
rule_branch1 <- rule_branch
val1 <- decision_rule(node,i)
rule_branch1[[names(val1)[1]]] <- val1
walk_the_tree(node[i], rule_branch1)
}
}
}
decision_rule <- function(node, i) {
# возвращаем правила разбиения в датафрейм вместе с названиями переменных и значениями
var_name <- var_names[node$split$varid[[1]]]
values_vec <- var_levels[[var_name]][ node$split$index == i]
values_txt <- paste(values_vec, collapse = ", ")
return( setNames(values_txt, var_name))
}
walk_the_tree(party_tree$node)
res_table <- Reduce(rbind, df_list)
return(res_table)
}
table <- treetable(chd)
table
#table[1:14]
#table$predict
library(partykit)
treetable <- function(party_tree) {
df_list <- list()
var_names <-  attr(party_tree$terms, "term.labels")
var_levels <- lapply(party_tree$data, levels)
walk_the_tree <- function(node, rule_branch = NULL) {
# проходим структуру разбиений дерева (рекурсивная функция)
# извлекаем правила для каждой ветви
if(missing(rule_branch)) {
rule_branch <- setNames(data.frame(t(replicate(length(var_names), NA))), var_names)
rule_branch <- cbind(rule_branch, nodeId = NA)
rule_branch <- cbind(rule_branch, predict = NA)
}
if(is.terminal(node)) {
rule_branch[["nodeId"]] <- node$id
rule_branch[["predict"]] <- predict_party(party_tree, node$id, type="prob")
df_list[[as.character(node$id)]] <<- rule_branch
} else {
for(i in 1:length(node)) {
rule_branch1 <- rule_branch
val1 <- decision_rule(node,i)
rule_branch1[[names(val1)[1]]] <- val1
walk_the_tree(node[i], rule_branch1)
}
}
}
decision_rule <- function(node, i) {
# возвращаем правила разбиения в датафрейм вместе с названиями переменных и значениями
var_name <- var_names[node$split$varid[[1]]]
values_vec <- var_levels[[var_name]][ node$split$index == i]
values_txt <- paste(values_vec, collapse = ", ")
return( setNames(values_txt, var_name))
}
walk_the_tree(party_tree$node)
res_table <- Reduce(rbind, df_list)
return(res_table)
}
table <- treetable(chd)
table[1:14]
table$predict
data <- read.csv2("Response.csv", sep=";")
head(data, 10)
sum(is.na(data))
data[!complete.cases(data),]
str(data)
data$response <- as.factor(data$response)
data$cus_leng <- ordered(data$cus_leng,
levels = c("1", "2", "3"))
data$age <- as.numeric(data$age)
data[] <- lapply(data, function(x) if(is.integer(x)) as.factor(x) else x)
library(dplyr)
data$response <- recode(data$response, "0"="Нет", "1"="Да")
str(data)
data[duplicated(data),]
data <- unique(data)
# смотрим, сколько наблюдений мы теперь будем использовать
nrow(data)
summary(data$cus_leng)
set.seed(42)
data$random_number <- runif(nrow(data),0,1)
development <- data[ which(data$random_number > 0.3), ]
holdout <- data[ which(data$random_number <= 0.3), ]
data$random_number <- NULL
development$random_number <- NULL
holdout$random_number <- NULL
str(development)
str(holdout)
summary(development$response)
summary(holdout$response)
range(development$age)
development$binned <-cut(x=development$age, breaks=seq(18, 63, by=5),
include.lowest=TRUE, right=TRUE,
ordered_result=TRUE, dig.lab = 0)
summary(development$binned)
library(lsr)
development$binned2 <- quantileCut(x=development$age, n=10,
include.lowest=TRUE, right=TRUE,
ordered_result=TRUE, dig.lab=0)
detach("package:lsr", unload=TRUE)
summary(development$binned2)
str(development)
development$binned <- NULL
development$binned2 <- NULL
development$age <-cut(x=development$age,
breaks=c(18,28,31,34,
37,41,44,47,
51,55,63,+Inf),
include.lowest=TRUE,
ordered_result=TRUE)
holdout$age <-cut(x=holdout$age,
breaks=c(18,28,31,34,
37,41,44,47,
51,55,63,+Inf),
include.lowest=TRUE,
ordered_result=TRUE)
library(CHAID)
# задаем набор условий для построения дерева CHAID
params <- chaid_control(minprob = 0.01, minsplit = 1000, minbucket = 500)
# строим модель дерева CHAID
chd  <- chaid(response ~ ., control = params, development)
# выводим диаграмму дерева
plot(chd)
# выводим диаграмму дерева
# в схематичном виде
print(chd)
prob_hold <- predict(chd, holdout, type="prob")
prob_hold[1:10]
round(prob_hold[1:10], 2)
library(partykit)
treetable <- function(party_tree) {
df_list <- list()
var_names <-  attr(party_tree$terms, "term.labels")
var_levels <- lapply(party_tree$data, levels)
walk_the_tree <- function(node, rule_branch = NULL) {
# проходим структуру разбиений дерева (рекурсивная функция)
# извлекаем правила для каждой ветви
if(missing(rule_branch)) {
rule_branch <- setNames(data.frame(t(replicate(length(var_names), NA))), var_names)
rule_branch <- cbind(rule_branch, nodeId = NA)
rule_branch <- cbind(rule_branch, predict = NA)
}
if(is.terminal(node)) {
rule_branch[["nodeId"]] <- node$id
rule_branch[["predict"]] <- predict_party(party_tree, node$id, type="prob")
df_list[[as.character(node$id)]] <<- rule_branch
} else {
for(i in 1:length(node)) {
rule_branch1 <- rule_branch
val1 <- decision_rule(node,i)
rule_branch1[[names(val1)[1]]] <- val1
walk_the_tree(node[i], rule_branch1)
}
}
}
decision_rule <- function(node, i) {
# возвращаем правила разбиения в датафрейм вместе с названиями переменных и значениями
var_name <- var_names[node$split$varid[[1]]]
values_vec <- var_levels[[var_name]][ node$split$index == i]
values_txt <- paste(values_vec, collapse = ", ")
return( setNames(values_txt, var_name))
}
walk_the_tree(party_tree$node)
res_table <- Reduce(rbind, df_list)
return(res_table)
}
table <- treetable(chd)
table[1:14]
table$predict
set.seed(42)
predvalue_hold <- predict(chd, holdout, type="response")
predvalue_hold[1:10]
# строим таблицу классификации
table(holdout$response, predvalue_hold)
table(holdout$response == "Да", predict(chd,
holdout, type="prob")[,"Да"] >= 0.30)
table(holdout$response == "Да", predict(chd,
holdout, type="prob")[,"Да"] >= 0.70)
library(pROC)
# выводим AUC нашей модели дерева для контрольной выборки
roc_hold <- roc(holdout$response, prob_hold[,2])
roc_hold
# строим ROC-кривую нашей модели дерева для контрольной выборки
roc_hold <- roc(holdout$response, prob_hold[,2])
roc_hold
plot.roc(roc_hold)
# вычисляем вероятности классов для обучающей
# выборки и записываем в объект prob_dev
prob_dev <- predict(chd, development, type="prob")
# строим график ROC-кривой для обучающей выборки
roc_dev <-plot.roc(development$response, prob_dev[,2],
main="График ROC-кривой для модели CHAID",
ci=TRUE, percent=TRUE,
print.auc=TRUE, col="red")
# добавляем в уже существующий график ROC-кривую
# для контрольной выборки
roc_hold <-plot.roc(holdout$response, prob_hold[,2],
ci=TRUE, percent=TRUE,
print.auc=TRUE, print.auc.x=50, print.auc.y=45,
col="purple", add=TRUE)
# добавляем легенды
legend("bottomright", legend=c("Обучающая выборка", "Контрольная выборка"),
col=c("red", "purple"), lwd=2)
install.packages("rmarkdown")
data <- read.csv2("Response.csv", sep=";")
head(data, 10)
sum(is.na(data))
data[!complete.cases(data),]
str(data)
data$response <- as.factor(data$response)
data$cus_leng <- ordered(data$cus_leng,
levels = c("1", "2", "3"))
data$age <- as.numeric(data$age)
data[] <- lapply(data, function(x) if(is.integer(x)) as.factor(x) else x)
library(dplyr)
data$response <- recode(data$response, "0"="Нет", "1"="Да")
str(data)
data[duplicated(data),]
data <- unique(data)
# смотрим, сколько наблюдений мы теперь будем использовать
nrow(data)
summary(data$cus_leng)
set.seed(42)
data$random_number <- runif(nrow(data),0,1)
development <- data[ which(data$random_number > 0.3), ]
holdout <- data[ which(data$random_number <= 0.3), ]
data$random_number <- NULL
development$random_number <- NULL
holdout$random_number <- NULL
str(development)
str(holdout)
summary(development$response)
summary(holdout$response)
range(development$age)
development$binned <-cut(x=development$age, breaks=seq(18, 63, by=5),
include.lowest=TRUE, right=TRUE,
ordered_result=TRUE, dig.lab = 0)
summary(development$binned)
library(lsr)
development$binned2 <- quantileCut(x=development$age, n=10,
include.lowest=TRUE, right=TRUE,
ordered_result=TRUE, dig.lab=0)
detach("package:lsr", unload=TRUE)
summary(development$binned2)
str(development)
development$binned <- NULL
development$binned2 <- NULL
development$age <-cut(x=development$age,
breaks=c(18,28,31,34,
37,41,44,47,
51,55,63,+Inf),
include.lowest=TRUE,
ordered_result=TRUE)
holdout$age <-cut(x=holdout$age,
breaks=c(18,28,31,34,
37,41,44,47,
51,55,63,+Inf),
include.lowest=TRUE,
ordered_result=TRUE)
library(CHAID)
# задаем набор условий для построения дерева CHAID
params <- chaid_control(minprob = 0.01, minsplit = 1000, minbucket = 500)
# строим модель дерева CHAID
chd  <- chaid(response ~ ., control = params, development)
# выводим диаграмму дерева
plot(chd)
# выводим диаграмму дерева
# в схематичном виде
print(chd)
prob_hold <- predict(chd, holdout, type="prob")
prob_hold[1:10]
round(prob_hold[1:10], 2)
library(partykit)
treetable <- function(party_tree) {
df_list <- list()
var_names <-  attr(party_tree$terms, "term.labels")
var_levels <- lapply(party_tree$data, levels)
walk_the_tree <- function(node, rule_branch = NULL) {
# проходим структуру разбиений дерева (рекурсивная функция)
# извлекаем правила для каждой ветви
if(missing(rule_branch)) {
rule_branch <- setNames(data.frame(t(replicate(length(var_names), NA))), var_names)
rule_branch <- cbind(rule_branch, nodeId = NA)
rule_branch <- cbind(rule_branch, predict = NA)
}
if(is.terminal(node)) {
rule_branch[["nodeId"]] <- node$id
rule_branch[["predict"]] <- predict_party(party_tree, node$id, type="prob")
df_list[[as.character(node$id)]] <<- rule_branch
} else {
for(i in 1:length(node)) {
rule_branch1 <- rule_branch
val1 <- decision_rule(node,i)
rule_branch1[[names(val1)[1]]] <- val1
walk_the_tree(node[i], rule_branch1)
}
}
}
decision_rule <- function(node, i) {
# возвращаем правила разбиения в датафрейм вместе с названиями переменных и значениями
var_name <- var_names[node$split$varid[[1]]]
values_vec <- var_levels[[var_name]][ node$split$index == i]
values_txt <- paste(values_vec, collapse = ", ")
return( setNames(values_txt, var_name))
}
walk_the_tree(party_tree$node)
res_table <- Reduce(rbind, df_list)
return(res_table)
}
table <- treetable(chd)
table[1:14]
table$predict
set.seed(42)
predvalue_hold <- predict(chd, holdout, type="response")
predvalue_hold[1:10]
# строим таблицу классификации
table(holdout$response, predvalue_hold)
table(holdout$response == "Да", predict(chd,
holdout, type="prob")[,"Да"] >= 0.30)
table(holdout$response == "Да", predict(chd,
holdout, type="prob")[,"Да"] >= 0.70)
library(pROC)
# выводим AUC нашей модели дерева для контрольной выборки
roc_hold <- roc(holdout$response, prob_hold[,2])
roc_hold
# строим ROC-кривую нашей модели дерева для контрольной выборки
roc_hold <- roc(holdout$response, prob_hold[,2])
roc_hold
plot.roc(roc_hold)
# вычисляем вероятности классов для обучающей
# выборки и записываем в объект prob_dev
prob_dev <- predict(chd, development, type="prob")
# строим график ROC-кривой для обучающей выборки
roc_dev <-plot.roc(development$response, prob_dev[,2],
main="График ROC-кривой для модели CHAID",
ci=TRUE, percent=TRUE,
print.auc=TRUE, col="red")
# добавляем в уже существующий график ROC-кривую
# для контрольной выборки
roc_hold <-plot.roc(holdout$response, prob_hold[,2],
ci=TRUE, percent=TRUE,
print.auc=TRUE, print.auc.x=50, print.auc.y=45,
col="purple", add=TRUE)
# добавляем легенды
legend("bottomright", legend=c("Обучающая выборка", "Контрольная выборка"),
col=c("red", "purple"), lwd=2)
